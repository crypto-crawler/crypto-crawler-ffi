/* Licensed under Apache-2.0 */

#ifndef CRYPTO_CRAWLER_H_
#define CRYPTO_CRAWLER_H_

/* Generated with cbindgen:0.16.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * Market type.
 */
typedef enum MarketType {
    Spot,
    LinearFuture,
    InverseFuture,
    LinearSwap,
    InverseSwap,
    Option,
    QuantoFuture,
    QuantoSwap,
} MarketType;

/**
 * The type of a message
 */
typedef enum MessageType {
    Trade,
    L2Event,
    L2Snapshot,
    L3Event,
    L3Snapshot,
    BBO,
    Ticker,
    Candlestick,
} MessageType;

/**
 * Message represents messages received by crawlers.
 */
typedef struct Message {
    /**
     * The exchange name, unique for each exchage
     */
    const char *exchange;
    /**
     * Market type
     */
    enum MarketType market_type;
    /**
     * Message type
     */
    enum MessageType msg_type;
    /**
     * Exchange specific symbol, used by RESTful APIs and websocket
     */
    const char *symbol;
    /**
     * Unix timestamp in milliseconds
     */
    uint64_t received_at;
    /**
     * the original message
     */
    const char *json;
} Message;

/**
 * Crawl realtime trades.
 *
 * ## Arguments
 *
 * - `exchange` The exchange name, can not be null
 * - `market_type` The market type
 * - `symbols` Symbols to crawl
 * - `num_symbols` Number of symbols, 0 means all symbols in the `market_type`
 * - `on_msg` The callback function to process messages
 * - `duration` How many seconds to run, only useful in testing
 */
void crawl_trade(const char *exchange,
                 enum MarketType market_type,
                 const char *const *symbols,
                 uintptr_t num_symbols,
                 void (*on_msg)(const struct Message*),
                 uint64_t duration);

/**
 * Crawl level2 orderbook update events.
 */
void crawl_l2_event(const char *exchange,
                    enum MarketType market_type,
                    const char *const *symbols,
                    uintptr_t num_symbols,
                    void (*on_msg)(const struct Message*),
                    uint64_t duration);

/**
 * Crawl level2 orderbook snapshots through RESTful APIs.
 */
void crawl_l2_snapshot(const char *exchange,
                       enum MarketType market_type,
                       const char *const *symbols,
                       uintptr_t num_symbols,
                       void (*on_msg)(const struct Message*),
                       uint64_t interval,
                       uint64_t duration);

/**
 * Crawl level3 orderbook update events.
 */
void crawl_l3_event(const char *exchange,
                    enum MarketType market_type,
                    const char *const *symbols,
                    uintptr_t num_symbols,
                    void (*on_msg)(const struct Message*),
                    uint64_t duration);

/**
 * Crawl level3 orderbook snapshots through RESTful APIs.
 */
void crawl_l3_snapshot(const char *exchange,
                       enum MarketType market_type,
                       const char *const *symbols,
                       uintptr_t num_symbols,
                       void (*on_msg)(const struct Message*),
                       uint64_t interval,
                       uint64_t duration);

#endif /* CRYPTO_CRAWLER_H_ */
