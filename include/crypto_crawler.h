/* Licensed under Apache-2.0 */

#ifndef CRYPTO_CRAWLER_H_
#define CRYPTO_CRAWLER_H_

/* Generated with cbindgen:0.20.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually.
 */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * Market type.
 *
 * * In spot market, cryptocurrencies are traded for immediate delivery, see
 * https://en.wikipedia.org/wiki/Spot_market.
 * * In futures market, delivery is set at a specified time in the future, see
 * https://en.wikipedia.org/wiki/Futures_exchange.
 * * Swap market is a variant of futures market with no expiry date.
 *
 * ## Margin
 *
 * A market can have margin enabled or disabled.
 *
 * * All contract markets are margin enabled, including future, swap and option.
 * * Most spot markets don't have margin enabled, only a few exchanges have spot
 * market with margin enabled.
 *
 * ## Linear VS. Inverse
 *
 * A market can be inverse or linear.
 * * Linear means USDT-margined, i.e., you can use USDT as collateral
 * * Inverse means coin-margined, i.e., you can use BTC as collateral.
 * * Spot market is always linear.
 *
 * **Margin and Inverse are orthogonal.**
 */
typedef enum MarketType {
    Unknown = 0,
    Spot,
    LinearFuture,
    InverseFuture,
    LinearSwap,
    InverseSwap,
    AmericanOption,
    EuropeanOption,
    QuantoFuture,
    QuantoSwap,
    Move,
    BVOL,
} MarketType;

/** Crypto message types. */
typedef enum MessageType {
    /** All other messages */
    Other,
    /** tick-by-tick trade messages */
    Trade,
    /** Incremental level2 orderbook updates */
    L2Event,
    /** Level2 snapshot from RESTful API */
    L2Snapshot,
    /** Level2 top K snapshots from websocket */
    L2TopK,
    /** Incremental level3 orderbook updates */
    L3Event,
    /** Level3 snapshot from RESTful API */
    L3Snapshot,
    /** Best bid and ask */
    BBO,
    /** 24hr rolling window ticker */
    Ticker,
    /** OHLCV candlestick */
    Candlestick,
    /** Funding rate */
    FundingRate,
    /** Open interest */
    OpenInterest,
} MessageType;

/**
 * Message represents messages received by crawlers.
 */
typedef struct Message {
    /**
     * The exchange name, unique for each exchage
     */
    const char *exchange;
    /**
     * Market type
     */
    enum MarketType market_type;
    /**
     * Message type
     */
    enum MessageType msg_type;
    /**
     * Unix timestamp in milliseconds
     */
    uint64_t received_at;
    /**
     * the original message
     */
    const char *json;
} Message;

/**
 * Crawl realtime trades.
 *
 * ## Arguments
 *
 * - `exchange` The exchange name, can not be null
 * - `market_type` The market type
 * - `symbols` Symbols to crawl
 * - `num_symbols` Number of symbols, 0 means all symbols in the `market_type`
 * - `on_msg` The callback function to process messages
 * - `duration` How many seconds to run, only useful in testing, 0 means run
 * forever
 */
void crawl_trade(const char *exchange, enum MarketType market_type,
                 const char *const *symbols, uintptr_t num_symbols,
                 void (*on_msg)(const struct Message *), uint64_t duration);

/**
 * Crawl level2 orderbook update events.
 */
void crawl_l2_event(const char *exchange, enum MarketType market_type,
                    const char *const *symbols, uintptr_t num_symbols,
                    void (*on_msg)(const struct Message *), uint64_t duration);

/**
 * Crawl level3 orderbook update events.
 */
void crawl_l3_event(const char *exchange, enum MarketType market_type,
                    const char *const *symbols, uintptr_t num_symbols,
                    void (*on_msg)(const struct Message *), uint64_t duration);

/**
 * Crawl level2 orderbook snapshots through RESTful APIs.
 */
void crawl_l2_snapshot(const char *exchange, enum MarketType market_type,
                       const char *const *symbols, uintptr_t num_symbols,
                       void (*on_msg)(const struct Message *),
                       uint64_t duration);

/**
 * Crawl best bid and ask.
 */
void crawl_bbo(const char *exchange, enum MarketType market_type,
               const char *const *symbols, uintptr_t num_symbols,
               void (*on_msg)(const struct Message *), uint64_t duration);

/**
 * Crawl level2 orderbook top-k snapshots through websocket.
 */
void crawl_l2_topk(const char *exchange, enum MarketType market_type,
                   const char *const *symbols, uintptr_t num_symbols,
                   void (*on_msg)(const struct Message *), uint64_t duration);

/**
 * Crawl level3 orderbook snapshots through RESTful APIs.
 */
void crawl_l3_snapshot(const char *exchange, enum MarketType market_type,
                       const char *const *symbols, uintptr_t num_symbols,
                       void (*on_msg)(const struct Message *),
                       uint64_t duration);

/**
 * Crawl 24hr rolling window ticker.
 *
 * If `symbols` is None, it means all trading symbols in the `market_type`,
 * and updates the latest symbols every hour.
 */
void crawl_ticker(const char *exchange, enum MarketType market_type,
                  const char *const *symbols, uintptr_t num_symbols,
                  void (*on_msg)(const struct Message *), uint64_t duration);

/**
 * Crawl perpetual swap funding rates.
 */
void crawl_funding_rate(const char *exchange, enum MarketType market_type,
                        const char *const *symbols, uintptr_t num_symbols,
                        void (*on_msg)(const struct Message *),
                        uint64_t duration);

/**
 * Crawl candlestick(i.e., OHLCV) data.
 *
 * If `symbol_interval_list` is None or empty, this API will crawl candlesticks
 * from 10 seconds to 3 minutes(if available) for all symbols.
 */
void crawl_candlestick(const char *exchange, enum MarketType market_type,
                       const char *const *symbols, const uintptr_t *intervals,
                       uintptr_t num_symbols,
                       void (*on_msg)(const struct Message *),
                       uint64_t duration);

/**
 * Crawl all open interest.
 */
void crawl_open_interest(const char *exchange, enum MarketType market_type,
                         void (*on_msg)(const struct Message *),
                         uint64_t duration);

/**
 * Subscribe to multiple message types of one symbol.
 *
 * This API is suitable for client applications such as APP, website, etc.
 *
 * String messages in `tx` are already parsed by `crypto-msg-parser`.
 */
void subscribe_symbol(const char *exchange, enum MarketType market_type,
                      const char *symbol, const enum MessageType *msg_types,
                      uintptr_t num_msg_types, void (*on_msg)(const char *),
                      uint64_t duration);

#endif /* CRYPTO_CRAWLER_H_ */
